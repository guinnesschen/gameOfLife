{"version":3,"sources":["Game.js","App.js","index.js"],"names":["ReactGA","initialize","set","userId","Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","Component","Game","state","cells","interval","isRunning","runGame","event","category","action","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleRandom","rows","cols","board","Math","random","makeCells","handleClear","makeEmptyBoard","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","floor","console","log","HEIGHT","WIDTH","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae291030.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Game.css'\nimport ReactGA from 'react-ga';\n\nconst trackingId = \"UA-179964815-1\"; \nReactGA.initialize(trackingId);\nReactGA.set({\n  userId: \"sample_user_ID\",\n})\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;  \nconst HEIGHT = 600;\n\nclass Cell extends Component {\n    render() {\n        const {x, y} = this.props;\n        return (\n            <div className=\"Cell\" \n                style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`\n                }}/>\n        );\n    }\n}\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        interval: 100,\n        isRunning: false,\n    }\n\n    runGame = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the run button.\",\n          });\n        this.setState({isRunning: true});\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the stop button.\",\n          });\n        this.setState({isRunning: false});\n        if (this.timeoutHandler){\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        console.log(\"running iteration\");\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]){\n                    if (neighbors === 2 || neighbors === 3){\n                        newBoard[y][x] = true;\n                    }\n                    else {\n                        newBoard[y][x] = false;\n                    }\n                }\n                else {\n                    if (!this.board[y][x] && neighbors === 3){\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({cells: this.makeCells()});\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval)\n\n    }\n\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++){\n            const dir = dirs[i];\n            let y1 = y + dir[0]\n            let x1 = x + dir[1]\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({interval: event.target.value});\n    }\n\n    handleRandom = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the random button.\",\n          });\n\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n        this.setState({cells: this.makeCells()});\n    }\n\n    handleClear = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the clear button.\",\n          });\n\n        this.board = this.makeEmptyBoard();\n        this.setState({cells: this.makeCells()});\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++){\n            board[y] = []\n            for (let x = 0; x < this.cols; x++){\n                board[y][x] = false;\n            }\n        }\n        return board;\n    }\n\n    makeCells() {\n        let cells = []\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                if (this.board[y][x]){\n                    cells.push({x, y});\n                }\n            }\n        }\n        return cells;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop\n        };\n    }\n\n    handleClick = (event) => {\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows){\n            this.board[y][x] = !this.board[y][x];\n            ReactGA.event({\n                category: \"Cell\",\n                action: \"User pressed the cell (\" + x + ', ' + y + \")\",\n              });\n        }\n        console.log(this.state.cells)\n        this.setState({cells: this.makeCells()});\n    }\n\n    render() {\n        const {cells, interval, isRunning} = this.state;\n        return (\n            <div>\n                <div className=\"Board\" \n                    style={{width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => {this.boardRef = n;}}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x}, ${cell.y}`}/>\n                    ))}\n                </div>\n                <div className=\"controls\">\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange}/> ms\n                    {isRunning ? \n                        <button className=\"button\" onClick={this.stopGame}>Stop</button>  : \n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}