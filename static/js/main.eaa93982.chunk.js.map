{"version":3,"sources":["Game.js","App.js","index.js"],"names":["ReactGA","initialize","set","userId","Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","Component","Game","state","cells","interval","isRunning","runGame","event","category","action","time","Date","now","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleRandom","rows","cols","board","Math","random","makeCells","handleClear","makeEmptyBoard","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","floor","console","log","HEIGHT","WIDTH","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaa93982.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Game.css'\nimport ReactGA from 'react-ga';\n\nconst trackingId = \"UA-179964815-1\"; \nReactGA.initialize(trackingId);\nReactGA.set({\n  userId: \"sample_user_ID\",\n})\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;  \nconst HEIGHT = 600;\n\nclass Cell extends Component {\n    render() {\n        const {x, y} = this.props;\n        return (\n            <div className=\"Cell\" \n                style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`\n                }}/>\n        );\n    }\n}\n\n\nclass Game extends Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        interval: 100,\n        isRunning: false,\n    }\n\n    runGame = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the run button.\",\n            time: Date.now()\n          });\n        this.setState({isRunning: true});\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the stop button.\",\n            time: Date.now()\n          });\n        this.setState({isRunning: false});\n        if (this.timeoutHandler){\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        console.log(\"running iteration\");\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]){\n                    if (neighbors === 2 || neighbors === 3){\n                        newBoard[y][x] = true;\n                    }\n                    else {\n                        newBoard[y][x] = false;\n                    }\n                }\n                else {\n                    if (!this.board[y][x] && neighbors === 3){\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        this.board = newBoard;\n        this.setState({cells: this.makeCells()});\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval)\n\n    }\n\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++){\n            const dir = dirs[i];\n            let y1 = y + dir[0]\n            let x1 = x + dir[1]\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({interval: event.target.value});\n    }\n\n    handleRandom = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the random button.\",\n            time: Date.now()\n          });\n\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n        this.setState({cells: this.makeCells()});\n    }\n\n    handleClear = () => {\n        ReactGA.event({\n            category: \"Controls\",\n            action: \"User pressed the clear button.\",\n            time: Date.now()\n          });\n\n        this.board = this.makeEmptyBoard();\n        this.setState({cells: this.makeCells()});\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++){\n            board[y] = []\n            for (let x = 0; x < this.cols; x++){\n                board[y][x] = false;\n            }\n        }\n        return board;\n    }\n\n    makeCells() {\n        let cells = []\n        for (let y = 0; y < this.rows; y++){\n            for (let x = 0; x < this.cols; x++){\n                if (this.board[y][x]){\n                    cells.push({x, y});\n                }\n            }\n        }\n        return cells;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop\n        };\n    }\n\n    handleClick = (event) => {\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows){\n            this.board[y][x] = !this.board[y][x];\n            ReactGA.event({\n                category: \"Cell\",\n                action: \"User pressed the cell (\" + x + ', ' + y + \")\",\n                time: Date.now()\n              });\n        }\n        console.log(this.state.cells)\n        this.setState({cells: this.makeCells()});\n    }\n\n    render() {\n        const {cells, interval, isRunning} = this.state;\n        return (\n            <div>\n                <div className=\"Board\" \n                    style={{width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => {this.boardRef = n;}}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x}, ${cell.y}`}/>\n                    ))}\n                </div>\n                <div className=\"controls\">\n                    Update every <input value={this.state.interval} onChange={this.handleIntervalChange}/> ms\n                    {isRunning ? \n                        <button className=\"button\" onClick={this.stopGame}>Stop</button>  : \n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}